cd C:/Users/user/my_project = เปิดโปรเจค
cd ชื่อไฟล์ = เปิดไฟล์
ls = เช็คว่ามีไฟล์อะไรบ้าง ใช้ได้กับทุก Command
-ctrl+สกลเมาส์ = ซูม
-git --version = เซ็คเวอร์ชั่น
-clear = เคลียคอมมาน
-git config --list = แสดงการตั้งค่า
-git config --global user.email "ระบุอีเมล" = กำหนดอีเมล
-git config --global user.name "ระบุชื่อ" = กำหนดชื่อ
cd ..  ชื่อไฟล์ = ย้อนออกจากไฟล์1สเต็ป
q = ออกจาก (END)

touch  ระบุชื่อไฟล์พร้อมนามสกุล = สร้างไฟล์
git init = สร้างกิต
git clone ลิงค์รีโมทกิตฮับ = จำลองเซิฟเวอร์บนเครื่อง

git status = เช็คแทคไฟล์รึยัง
git log = เช็คประวัติ
git log --oneline = แสดงประวัติแบบย่อ
git log --pretty=oneline = แสดงไอดีแบบoneline แต่ไอดีเต็ม
git log --graph = แสดงประวัติแบบกราฟ
git log -p -จำนวนcommitที่จะดู = แสดงละเอียดทุกอย่างของcommitนั้น
git log --oneline --decorate --graph --all = ดูทางเดินbranch
git show HEAD = แสดงประวัติตัวล่าสุด


git add ระบุชื่อไฟล์พร้อมนามสกุล = แท็กไฟล์ ,ติดตามไฟล์ , เพิ่มไฟล์ไปในแอเรียเพื่อแก้ไข 
git add *.html = แท็กไฟล์ .html ทั้งหมด
git add . = แท็กไฟล์ทั้งหมด ทุกนามสกุล

git commit -m "คอมเม้น" = บันทึกไฟล์ขึ้นlocal เฉพาะไฟล์ที่ add
git commit -am "คอมเม้น" = บันทึกไฟล์ทั้งหมดขึ้น local ทุกไฟล์ ทั้งไฟล์ที่add และไม่ได้add
git commit --amend = เชฟทับcommitก่อนหน้า ในกรณีที่ ลืมadd บางไฟล์

git rm --cached ชื่อ.นาม = ลบแท็ก
git reset ชื่อไฟล์ = ลบจากadd หรือ area
git reset --soft = ลบ commit หลังตัวนี้ทั้งหมด และนำไฟล์ที่เคยอยู่ใน commit ที่ลบไป กลับไปยัง Staging Area
git reset --mixed = ลบ commit หลังตัวนี้ทั้งหมด และนำไฟล์ที่เคยอยู่ใน commit ที่ลบไป กลับไปยัง Working Directory
!!!!!!!! git reset --hard ไอดีคอมมิส = ลบคอมมิสหลังตัวนี้ หรือข้างบนตัวนี้ ทุกตัว !!!!!!ลบถาวร
git reset --hard origin/master = ย้อนกลับไปใช้ทุกอย่างเหมือนบน github

git branch = เช็คว่ามีกี่กิ่ง
git checkout -b ชื่อbranchใหม่  , กิ่งใหม่ ห้ามมีเว้นวรรค แต่ใช้ - แทนได้ = สร้างกิ่ง (branch)สร้างแล้วจะสลับไปใช้อันใหม่อัตโนมัต
git checkout ใส่ชื่อ = สลับbranchไปยังชื่อที่ระบุ
git branch -m ชื่อ = เปลี่ยนชื่อ branch ย่อย
!!!!!!!! git branch -d ชื่อbranch = ลบbranch ตามชื่อที่ระบุ 
!!!!!!!! git branch -D ชื่อbranch = ลบbranch ตามชื่อที่ระบุ 
git merge ชื่อbranch = รวมbranch ก่อนรวมตัองกลับไป branch หลักก่อน
git mergetool = ตัวช่วยในการmerge เมื่อมีปัญหา
delete refs/remotes/<name>/HEAD
delete refs/remotes/origin/HEAD

git checkout ชื่อไฟล์ = กู้ข้อมูลในไฟล์คืนไฟล์ที่ลบไปล่าสุด

git diff ไอดี = ดูรายละเอียดทุกอย่างของcommitนั้น
git diff ไอดีเวอร์ชั่นเก่า ไอดีเวอร์ชั่่นใหม่ = เปรียบเที่ยบการเปลี่ยนแปลงแต่ละเวอร์ชั่น

git push = อัพไฟล์ขึ้นกิตฮับ
git push --force = บังคับอัพขึ้นgithub ให้เหมือนlocal (ในเครื่อง)
git push --set-upstream origin ชื่อbranch = อัพbranchสาขาใหม่ขึ้น github
git push origin --delete ชื่อbranch = ลบ branch บนgithub

git pull = ดึงไฟล์จากกิตฮับลงเครื่อง

git log
ตัวเลือก	           คำอธิบาย
-p     		แสดงแพตช์ที่นำมาใช้กับคอมมิตแต่ละครั้ง
--stat		แสดงสถิติสำหรับไฟล์ที่แก้ไขในแต่ละคอมมิต
--shortstat	แสดงเฉพาะบรรทัดที่เปลี่ยนแปลง/แทรก/การลบจากคำสั่ง --stat
--name-only	แสดงรายการไฟล์ที่แก้ไขหลังจากข้อมูลการคอมมิต
--name-status 	แสดงรายการไฟล์ที่ได้รับผลกระทบจากข้อมูลที่เพิ่ม/แก้ไข/ลบด้วย
--abbrev-commit แสดงเฉพาะอักขระสองสามตัวแรกของเช็คซัม SHA-1 แทนที่จะเป็นทั้งหมด 40 ตัว
--relative-date แสดงวันที่ในรูปแบบที่เกี่ยวข้อง (เช่น “2 สัปดาห์ก่อน”) แทนที่จะใช้รูปแบบวันที่แบบเต็ม
--graph		แสดงกราฟ ASCII ของสาขาและประวัติการรวมข้างเอาต์พุตบันทึก
--pretty		แสดงการคอมมิตในรูปแบบอื่น ค่าตัวเลือกได้แก่ หนึ่งบรรทัด สั้น เต็ม เต็ม และรูปแบบ (ที่คุณระบุรูปแบบของคุณเอง)
--oneline		ชวเลขสำหรับ--pretty=oneline --abbrev-commitใช้ร่วมกัน

$ git log --pretty=format:"%h - %an, %ar : %s" = เลือกข้อมูลที่แสดงได้เอง
$ git log --pretty=format:"%h %s" --graph = เลือกข้อมูลที่แสคงได้เอง มีเส้นสี branch
ตัวระบุ	คำอธิบายของ Output
%H     คอมมิตแฮช
%h     แฮชคอมมิชชันแบบย่อ
%T     แฮชต้นไม้
%t     แฮชต้นไม้ตัวย่อ
%P     แฮชของผู้ปกครอง
%p     แฮชพาเรนต์ย่อ
%an    ชื่อผู้แต่ง
%ae    อีเมลผู้แต่ง
%ad    วันที่เขียน (รูปแบบเป็นไปตาม --date=option)
%ar    วันที่เขียนญาติ
%cn    ชื่อตัวแทน
%ce    คอมมิชชันอีเมล
%cd    วันที่ทำสัญญา
%cr    วันที่ทำสัญญา ญาติ
%s     เรื่อง
